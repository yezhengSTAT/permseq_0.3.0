%\VignetteIndexEntry{Bioconductor LaTeX Style}
%\VignettePackage{BiocStyle}
%\VignetteEngine{utils::Sweave}
\documentclass[11pt]{article}

<<style, eval=TRUE, echo=FALSE, results='asis'>>=
BiocStyle::latex()
@ 

%\newcommand{\exitem}[3]{%
%  \item \texttt{\textbackslash#1\{#2\}} #3 \csname#1\endcsname{#2}.%
%}

\usepackage{authblk}
%\usepackage{anysize}
%\usepackage{hyperref}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
%\usepackage[usenames,dvipsnames]{xcolor}
%\usepackage{multicol}
\usepackage{amssymb,amsmath}
\usepackage{multirow}
%\usepackage{ragged2e}
\usepackage{tikz}
\usetikzlibrary{fit,positioning}
\usetikzlibrary{shapes,arrows}

\begin{document}

<<include=FALSE>>=
library(knitr)
opts_chunk$set(
concordance=TRUE
)
@



\title{Perm-seq pipeline for Multi-read Analysis of ChIP-seq Data}
\author[1]{Xin Zeng}
\author[1]{Ye Zheng$^*$}
\author[1]{M. Constanza Rojo-Alfaro$^*$}
\author[1,2]{S\"{u}nd\"{u}z Kele\c{s}}
\affil[1]{Department of Statistics, University of Wisconsin-Madison.}
\affil[2]{Department of Biostatistics and Medical Informatics, University of Wisconsin-Madison}
\date{June 2015}

\maketitle
\tableofcontents
%\footnotemark[$*$]{Equaly contributed authors}
%\footnotetext[*]{Equaly contributed authors}
\section{Overview}

The overall pipeline allocates multi-reads which are reads that map to multiple positions in the genome and are typically discarded or utilized in a sub-optimal way by standard alignment of ChIP-seq data.\\
This package can be used to align ChIP-seq data of transcription factors and Histone modifications with punctuated signals (e.g., H3K4me3) with or without prior information. 

%This document provides an introduction to the analysis of mapping protein-DNA interactions in segmental duplication and highly repetitive regions of the genomes with the \textbf{p}rior-\textbf{e}nhanced \textbf{r}ead \textbf{m}apping (Perm-seq)pipeline.


%<<preliminaries,echo=FALSE,results=hide>>=
%options(prompt = "R> ")
%@

%<<load,eval=FALSE>>=
%library(permseq)
%@
\section{Prerequisites}

The overall pipeline requires R, C++ and Perl. Users need to download and install Bowtie (\href{http://sourceforge.net/projects/bowtie-bio/files/bowtie}{http://sourceforge.net\\/projects/bowtie-bio/files/bowtie/}), CSEM (CSEM $>=$ 2.3: \href{http://deweylab.biostat.wisc.edu/csem/}{http://deweylab.biostat.wisc.edu/csem/}) and R package \Rpackage{permseq} (\href{https://github.com/keleslab/permseq}{https://github.com/keleslab/permseq}).
<<load,eval=FALSE>>=
library(permseq)
@
Besides, to run the \Rpackage{permseq}, users should also install Perl and Perl module, Statistics:Descriptive, which will be called by \Rpackage{permseq}

After downloading Bowtie, users also need create the Bowtie indices (or download them).
\subsection{Bowtie index}
\begin{enumerate}
\item Download the Bowtie indices for your genome: The Bowtie website provides pre-built indices for a number of commonly-used genomes. For example, you can download the index for \emph{hg19} genome (UCSC hg19) from the Bowtie website.
\item Build new Bowtie indices: To create your own (\emph{hg19}, for example), you can run: 
\begin{verbatim}
bowtie-build chr19.fa,chr22.fa hg19
\end{verbatim}
The first argument "chr19.fa,chr22.fa" is a comma-separated list of FASTA files containing the reference sequences to be aligned (only human chromosome 19 and chromosome 22 in this case) and \texttt{hg19} is the basename of the index files to be created.
\end{enumerate}
Please refer to  Bowtie documentation for more options and details.

%\newpage
\section{\Rpackage{permseqExample} Package}
A \Rpackage{permseqExample} package is available with demo data so the users can test \Rpackage{permseq} in a reduced period of time using the given script and compare results with the R images included. Bowtie indices are also available.
We first created a sample reduced genome using 1\% of the human chromosome 22 from the \emph{hg19} assembly. The original ChIP, DNase, and Histone ChIP-seq fastq files were downsampled to contain reads that  map to our sample reduced genome. These datasets are:
\begin{enumerate}
\item \emph{ChIP\_partial.fastq}: Atf3 ChIP-seq fastq file from GM12878.
\item \emph{DNase\_partial.fastq}: DNase-seq replicate 1 fastq file from GM12878.
\item \emph{H2az\_partial.fastq}: H2az Histone ChIP-seq fastq file from GM12878.
\item \emph{H3k4me1\_partial.fastq}: H3kme1 Histone ChIP-seq fastq file from GM12878.
\end{enumerate}
We will use these data in the rest of this vignette. We refer the reader to the \Rpackage{permseqExample} package help manual for more usage details.
\section{Workflow}
The \Rpackage{permseq} package consists of prior module generation, prior generation, and multi-read allocation. Prior module generation consists of processing of the data for fitting the prior model and it is separated into different functions depending on the type of prior data that the user wants to use. \\
In summary, the three steps are:
\begin{enumerate}
\item Creating prior module
\begin{enumerate}
\item[1.1] \Rcode{priorProcess}: Available prior data is either only DNase-seq or both DNase-seq and Histone ChIP-seq.
\item[1.2] \Rcode{priorHistone\_initial} and \Rcode{priorHistone\_multi}: Available prior data is based on Histone ChIP-seq.
\end{enumerate}
\item Generating priors: \Rcode{priorGenerate}
\item Allocate multi-reads: \Rcode{readAllocate}
\end{enumerate}

Table \ref{table:section} summarizes relevant sections of this vignette based on user input data.

\begin{table}[h!]
\centering
\begin{tabular}{lll}
\hline
Input Data & Functions & Section \\
\hline
\multirow{3}{*}{ChIP+DNase} & \Rcode{priorProcess} & 4.1.1 \\
 & \Rcode{priorGenerate} & 4.2 \\
 & \Rcode{readAllocate} & 4.3 \\
\hline
\multirow{3}{*}{ChIP+DNase+Histone} & \Rcode{priorProcess} & 4.1.2 \\
 & \Rcode{priorGenerate} & 4.2\\
 & \Rcode{readAllocate} & 4.3\\
 \hline
\multirow{4}{*}{ChIP+Histone} & \Rcode{priorHistone\_init} & 4.1.3\\
 & \Rcode{priorHistone\_multi} & 4.1.3\\
 & \Rcode{priorGenerate} & 4.2\\
 & \Rcode{readAllocate} & 4.3\\ 
 \hline
 ChIP &  \Rcode{readAllocate} & 6.1 \\
\hline
\end{tabular}
\caption{Input data and functions}\label{table:section}
\end{table}

 For the enumerated cases in Table \ref{table:section},  each function will take as input the result of the previous one. Therefore, these functions should be executed in the same order as shown in Table \ref{table:section}.\\
In each step, \Rpackage{permseq} will return an S4 \emph{Prior} class, which is described in section 5. This S4 class summarizes the  analysis information and it will be updated in each step.\\\\
To align different sequencing data (ChIP-seq, Input ChIP-seq, DNase-seq, and Histone ChIP-seq), \Rpackage{permseq} utilizes the following Bowtie parameters:
\begin{verbatim}
bowtie -q -v 2 -a -m 99 -p 8 --sam hg19 data.fastq data.sam
\end{verbatim}
The package allows the user to change the \texttt{-v}, \texttt{-m}, and \texttt{-p} options in Bowtie, which are set to 2 (alignments may have no more than 2 mismatches), 99 (suppress alignments for a particular read if more than 99 reportable alignments exist for it) and 8 (launch 8 parallel search threads) by default, respectively.\\\
The other arguments are:
\begin{enumerate}
\item \texttt{hg19}: Name of the Bowtie index obtained as described in section 2.1, given as an argument in \Rpackage{permseq}.
\item \texttt{data.fastq}: A comma-separated list of file names containing the
  reads in FASTQ format, given as an argument in \Rpackage{permseq}.
\item \texttt{data.sam}: Aligned file in SAM format (output file).
\end{enumerate}

The main structure of the algorithm with DNase-seq and Histone ChIP-seq driven priors is summarized in Figure \ref{figure:pipeline}.
\begin{figure}[h!]
\centering
\resizebox{12.0cm}{!}{\begin{tikzpicture}[node distance = 1.5cm]
\tikzstyle{connect}=[-latex, thick]
\centering
    \node [draw, shape=rectangle, rounded corners,fill=cyan!70!, align=center] (CHIPfastq) {ChIP-seq fastq files};
    \node [draw, shape=rectangle, rounded corners,fill=SeaGreen!50!, align=center, right =of CHIPfastq] (DNASEfastq) {DNase fastq file};
    \node [draw, shape=rectangle, rounded corners,fill=SeaGreen!50!, align=center, right =of DNASEfastq] (HISTONEfastq) {Histone fastq files};
    \node [align=center, below of=CHIPfastq, below=-1cm] (Bowtie) {\emph{Bowtie}};
    \node [align=center, below of=DNASEfastq, below=-1cm] (CSEM1) {\emph{CSEM}};
    \node [align=center, below of=HISTONEfastq, below=-1cm] (CSEM2) {\emph{CSEM}};
    \node [draw, shape=rectangle, rounded corners,fill=cyan!70!, align=center, below of=Bowtie, below=-0.8cm] (UNIchip) {Uni-reads and multi-\\reads with aligments\\positions};
    \node [draw, shape=rectangle, rounded corners,fill=SeaGreen!50!, align=center, below of=CSEM1, below=-0.8cm] (UNIdnase) {Uni-reads and multi-\\reads with allocation\\probabilities};
    \node [draw, shape=rectangle, rounded corners,fill=SeaGreen!50!, align=center, below of=CSEM2, below=-0.8cm] (UNIhistone) {Uni-reads and multi-\\reads with allocation\\probabilities};
    \node [draw, shape=rectangle, rounded corners,fill=cyan!70!, align=center, below of=UNIchip, below=-0.2cm] (NUCchip) {Nucleotide-level ChIP\\uni-read count};
    \node [draw, shape=rectangle, rounded corners,fill=SeaGreen!50!, align=center, below of=UNIdnase, below=-0.2cm] (NUCdnase) {Nucleotide-level DNase\\read counts};
    \node [draw, shape=rectangle, rounded corners,fill=SeaGreen!50!, align=center, below of=UNIhistone, below=-0.2cm] (NUChistone) {Nucleotide-level histone\\trinary indicators}; 
    \node [draw, shape=trapezium, rounded corners,fill=cyan!70!, align=center, below of=NUCdnase, below=-0.1cm] (GLasso) {Group Lasso to select\\informative histones}; 
    \node [draw, shape=trapezium, rounded corners,fill=cyan!70!, align=center, below of=GLasso, below=-0.5cm] (LogL) {Log-linear model}; 
    \node [draw, shape=rectangle, rounded corners,fill=cyan!70!, align=center, below of=LogL, below=-0.8cm] (pseudo) {Pseudo ChIP counts}; 
    \node [draw, shape=trapezium, rounded corners,fill=blue!60!, align=center, below of=pseudo, below=-0.8cm] (dir-mul) {CSEM in the Dirichlet-multinomial\\regression model}; 
    \node [draw, shape=rectangle, rounded corners,fill=blue!60!, align=center, below of=dir-mul, below=-0.5cm] (permseq) {perm-seq\\alignment output};
\draw[-, thick] (CHIPfastq) -- (Bowtie);
\draw[-, thick] (DNASEfastq) -- (CSEM1);
\draw[-, thick] (HISTONEfastq) -- (CSEM2);
  \path (Bowtie) edge [connect] (UNIchip)
        (CSEM1) edge [connect] (UNIdnase)
        (CSEM2) edge [connect] (UNIhistone)
        (UNIchip) edge [connect] (NUCchip)
        (UNIdnase) edge [connect] (NUCdnase)        
        (UNIhistone) edge [connect] (NUChistone)  
    (NUCchip) edge [connect] (GLasso)  
		(NUCdnase) edge [connect] (GLasso)  
		(NUChistone) edge [connect] (GLasso)          
		(GLasso) edge [connect] (LogL)        
		(LogL) edge [connect] (pseudo)        
		(pseudo) edge [connect] (dir-mul)        
		(dir-mul) edge [connect] (permseq);
\end{tikzpicture}
}
%\caption{\fcolorbox{black}{SeaGreen!50!}{\rule{0pt}{4pt}\rule{4pt}{0pt}} \texttt{priorProcess}, \fcolorbox{black}{cyan!70!}{\rule{0pt}{4pt}\rule{4pt}{0pt}} \texttt{priorGenerate} and \fcolorbox{black}{blue!60!}{\rule{0pt}{4pt}\rule{4pt}{0pt}} \texttt{readAllocate}. Rectangle shapes indicate data (input/output) and trapezoids indicate models/methods.}
\caption{Rectangle shapes indicate data (input/output) and trapezoids indicate models/methods.}
\label{figure:pipeline}
\end{figure}

In the Perm-seq model, Histone ChIP-seq read counts are converted into trinary indicators $\mathbf{\gamma}$ according to 90$-th$ and 99$-th$ percentile of Histone ChIP-seq read count distribution:
\[
 \gamma_i =
  \begin{cases}
   0 & \text{if histone read counts}  \leq 90-th,\\
   1       & \text{if } 90-th < \text{histone read counts}\leq 99-th, \\
   2       & \text{if histone read counts} > 99-th,
  \end{cases}
\]
for $i = 1,\ldots,h$, where $h$ is the number of Histone ChIP-seq data sets given by the user.\\\\
In what follows, we will use the default options for the function arguments: \Rcode{fragL}, \Rcode{AllocThres}, \Rcode{capping}, \Rcode{vBowtie}, \Rcode{mBowtie}, \Rcode{pBowtie}, and \Rcode{saveFiles}. For more options, please refer to section 6.

\subsection{Creating prior module based on multiple data sets}

This section describes how to create prior module from your DNase-seq and/or Histone ChIP-Seq data. \\
Creating prior module involves the following tasks.
\begin{enumerate}
\item Align DNase-seq and Histone ChIP-seq reads with Bowtie. SAM files are generated as a result for each input dataset.
\item Allocate multi-reads using CSEM. BAM files are generated as a result for each input dataset.
\item BAM output from CSEM is converted to BED format and a subset of reads with high allocation score is selected to avoid generation of spurious signals. In the applications presented in %\cite{Xin}, reads with allocation score larger than 900 are used (parameter \texttt{AllocThres} set as default to 900).
\item Generate nucleotide-level read counts for the DNase-seq and Histone ChIP-seq by essentially counting the number of reads overlapping each nucleotide.
\item Partition the genome into multiple segments (based on the DNase counts and/or trinary Histone ChIP-Seq indicators).
\end{enumerate}

\subsubsection{Creating prior module with only DNase-seq data}

<<priorProcess_DNase,eval=FALSE>>=
priorProcess_DNase <- priorProcess(dnaseFile="DNase_partial.fastq", histoneFile=NULL,
 dnaseName="DNase_partial", histoneName=NULL, fragL=200, AllocThres=900,
 chrList="chr22_partial", capping=0, outfileLoc="./", outfile="only_dnase",
 bowtieIndex="./chr22_partial", csemDir="./csem-2.3", bowtieDir="./bowtie-1.1.1",
 vBowtie=2, mBowtie=99, pBowtie=8, saveFiles=TRUE)
@
%\begin{verbatim}
%priorProcess_DNase <- priorProcess(dnaseFile="DNase_partial.fastq", histoneFile=NULL,
% dnaseName="DNase_partial", histoneName=NULL, fragL=200, AllocThres=900,
% chrList="chr22_partial", capping=0, outfileLoc="./", outfile="only_dnase",
% bowtieIndex="./chr22_partial", csemDir="./csem-2.3", bowtieDir="./bowtie-1.1.1",
% vBowtie=2, mBowtie=99, pBowtie=8, saveFiles=TRUE)
%\end{verbatim}
This will create a \emph{Prior} S4 object which contains the main information that needs to be inherited to continue the analysis. For more details about the \emph{Prior} object, refer to section 4 or the R help manual of the package. \\
The main slots of the Prior object type output  are:
\begin{enumerate}
\item \textbf{dnaseKnots}: Vector of the knot points for the B-spline functions used in the fit.
\begin{verbatim}
> priorProcess_DNase@dnaseKnots
[1]  594 2029 3440
\end{verbatim}
They are the 90, 99, and 99.9th percentiles of DNase-seq read count distribution.
\item \textbf{dnaseThres}: Vector of DNase-seq groups. Groups are constructed based on nucleotide level counts, except the first group that will include counts equal to 0, 1 and 2, and the last group that will include counts larger than the 99.9th percentile of the read count distribution.
\begin{verbatim}
> priorProcess_DNase@dnaseThres
[1] 2 3 4 5 6 ... 3435 3436 3438 3440 3794
\end{verbatim}
DNase-seq counts smaller or equal to 2 are clustered into one group; counts equal to 3 are clustered into another group and so on. Positions with counts larger than 3440 are clustered into one group. Specifically, the corresponding count is set at the 99.95th percentile of the read count distribution for model fitting, e.g., 3794 in this specific case.

\item \textbf{posLoc\_bychr}: List by chromosome.\\ Each element lists a file named chr$i$\_dnase\_one\_dnase\_positions\_cluster.txt (in the example for this vignette, this list is of length one since we are only using part of chr 22). This file encodes which segments of the genome are in which prior group, based on DNase-seq read counts. Each line corresponds to one chromosome, starting with the chromosome ID, followed by pairs of segment lengths and group IDs: 
\begin{verbatim}
chr22_partial    5    574    1    575    2    576 ...
\end{verbatim}
The first segment of chr22\_partial is in group 574 according to \Rcode{dnaseThres}. In other words, DNase-seq counts equal to 574 are clustered into the same group, and the number of positions that belongs to group 574 is 5.
\end{enumerate}

\subsubsection{Creating prior module with DNase-seq and Histone ChIP-seq data}

<<priorProcess_DNaseHistone,eval=FALSE>>=
priorProcess_DNaseHistone <- priorProcess(dnaseFile="DNase_partial.fastq",
 histoneFile=c("H2az_partial.fastq", "H3k04me1_partial.fastq"),
 dnaseName="DNase_partial", histoneName=c("H2az_partial", "H3k04me1_partial"),
 fragL=200, AllocThres=900, chrList="chr22_partial", capping=0, outfileLoc="./",   
 outfile="dnase_histone", bowtieIndex="./chr22_partial", csemDir="./csem-2.3",
 bowtieDir="./bowtie-1.1.1", vBowtie=2, mBowtie=99, pBowtie=8, saveFiles=TRUE)
@
%\begin{verbatim}
%priorProcess_DNaseHistone <- priorProcess(dnaseFile="DNase_partial.fastq",
% histoneFile=c("H2az_partial.fastq", "H3k04me1_partial.fastq"),
% dnaseName="DNase_partial", histoneName=c("H2az_partial", "H3k04me1_partial"),
% fragL=200, AllocThres=900, chrList="chr22_partial", capping=0, outfileLoc="./",   
% outfile="dnase_histone", bowtieIndex="./chr22_partial", csemDir="./csem-2.3",
% bowtieDir="./bowtie-1.1.1", vBowtie=2, mBowtie=99, pBowtie=8, saveFiles=TRUE)
%\end{verbatim}
This function will create a \emph{Prior} S4 object which contains the main information that needs to be inherited to continue the analysis.\\
The main slot that is different from the ones described in section 4.1.1 is \textbf{posLoc\_bychr}, which is a list by chromosome.\\ 
Similarly, each element points to a file
chr$i$\_dnase\_dnase\_histone\_positions\_cluster.txt.
This file encodes which segments of the genome are in which group, based on DNase-seq counts and Histone trinary indicators.  Each line corresponds to one chromosome, starting with the chromosome ID, followed by pairs of segment lengths and group IDs:
\begin{verbatim}
chr22_partial    5    574_0_1    1    575_0_1    2    576_0_1    1 ... 
\end{verbatim}
The first segment of chr22\_partial is in group 574\_0\_1. Each group is based on the DNase-seq reads count and the histones trinary indicator. Positions within group 574\_0\_1 have 574  DNase-seq reads aligned to them, and H2az histone ChIP-seq reads counts at these positions are smaller than the 90th percetile resulting in the number \"0\" here . Besides, H3k4me1 histone ChIP-seq reads count is larger than the 90th percentile and smaller or equal than the 99th percentile. Thus the indicator for it is \"1\". Moreover, the number of positions that belong to group 574\_0\_1 is 5.

\subsubsection{Creating prior module with only Histone ChIP-seq data}
Utilizing only histone ChIP-seq data requires the following two steps.
\begin{enumerate}
\item  \Rcode{priorHistone\_init}: This function processes histone ChIP-seq datasets and generates plots depicting marginal relationship of each histone ChIP-seq with the ChIP-seq data to be analyzed. In these marginal plots, histone ChIP-seq counts are not converted into trinary counts. Instead, they are treated as numerical variables as for the DNase-seq case. 
Based on these plots, the user specifies the  histone ChIP-seq data to be used for prior construction. We recommend to choose the histone that seems most correlated with the ChIP read.
\item \Rcode{priorHistone\_multi}: This function generates prior from the selected histone ChIP-seq data using it as a numerical variable and applying the prior construction framework of Section 4.1.1.
\end{enumerate}
For example, we  can utilize two histone ChIP-seq datasets, namely, H2az and K3k04me1 as follows:
<<priorHistone_init,eval=FALSE>>=
priorHistone_init <- priorHistone_init(histoneFile=c("H2az_partial.fastq",
 "H3k04me1_partial.fastq"), histoneName=c("H2az_partial", "H3k04me1_partial"),
 fragL=200, AllocThres=900, chrList="chr22_partial", capping=0, outfileLoc="./",
 chipFile="ChIP_partial.fastq", bowtieIndex="./chr22_partial", csemDir="./csem-2.3",
 bowtieDir="./bowtie-1.1.1", vBowtie=2, mBowtie=99, pBowtie=8, saveFiles=TRUE)
@
%\begin{verbatim}
%priorHistone_init <- priorHistone_init(histoneFile=c("H2az_partial.fastq",
% "H3k04me1_partial.fastq"), histoneName=c("H2az_partial", "H3k04me1_partial"),
% fragL=200, AllocThres=900, chrList="chr22_partial", capping=0, outfileLoc="./",
% chipFile="ChIP_partial.fastq", bowtieIndex="./chr22_partial", csemDir="./csem-2.3",
% bowtieDir="./bowtie-1.1.1", vBowtie=2, mBowtie=99, pBowtie=8, saveFiles=TRUE)
%\end{verbatim}
This results in the marginal plots in Figure \ref{figure:marginal}.
\begin{figure}[h!]
  \begin{minipage}[b]{.5\linewidth}
     \centering%\large A
\includegraphics[width=3in]{marginal_histone_plot_1.pdf}      
     %\subcaption{A subfigure}\label{fig:1a}
  \end{minipage}%
  \begin{minipage}[b]{.5\linewidth}
     \centering%\large B
\includegraphics[width=3in]{marginal_histone_plot_2.pdf} 
%     \subcaption{Another subfigure}\label{fig:1b}
  \end{minipage}
\caption{Output plots from priorHistone\_init function. These plots depict the relationships between ChIP counts (the main dataset for which we are building a prior for) and the Histone ChIP-seq counts.}
\label{figure:marginal}
\end{figure}





To choose and utilize H2az without DNase-seq, we set \Rcode{dnaseIndex=1} in \Rcode{priorHistone\_multi} function.\\
We note that since these marginal plots were constructed only using a very small subset of the actual datasets, the do not exhibit as strong relationship as the full data% (See \cite{Xin} for results using the full datasets).
<<priorHistone_multi,eval=FALSE>>=
priorHistone_multi <- priorHistone_multi(priorHistone_init, dnaseIndex=1,
 outfileLoc="./", outfile="twodata_histone")
@
%\begin{verbatim}
%priorHistone_multi <- priorHistone_multi(priorHistone_init, dnaseIndex=1,
% outfileLoc="./", outfile="twodata_histone")
%\end{verbatim}
This function creates a \emph{Prior} S4 object which contains the main information that needs to be inherited to continue the analysis.\\
The main slot that is different from the ones described in sections 4.1.1 and 4.1.2 is 
\textbf{dnaseName}. Previously, \textbf{dnaseName} was the name of the DNase data but when DNase data is not available, it will be the name of the Histone ChIP-seq data used as DNase:
\begin{verbatim}
> priorHistone_multi@dnaseName
[1] "H2az_partial"
\end{verbatim}
In this case, knots (\textbf{dnaseKnots}) and groups (\textbf{dnaseThres}) are calculated based on the given Histone ChIP-seq data.
\subsection{Generating priors}

Using the \emph{Prior} object created in section 4.1, the user can run the \Rcode{priorGenerate} function of \Rpackage{permseq} to generate priors.\\
The internal structure of the function is:
\begin{enumerate}
\item Align ChIP-seq reads using Bowtie. SAM files are obtained as a result for each ChIP data.
\item Generate the corresponding BED file containing uni-reads from the SAM formatted alignment files.
\item Average over the uni-reads ChIP-seq read counts across positions within the same group, based on their read count.
\item Select important Histone ChIP-seq datasets by Group Lasso and fit the model (if Histone ChIP-seq datasets are used). \Rcode{maxHistone} is the maximum number of allowed Histone ChIP-seq datasets in the model and is suggested to be smaller than 6 in order to avoid too many groups with very few read counts in each position.
\item Generate as many prior files named "prior\_chipFile.txt" as ChIP files given.
\end{enumerate}

For example, we can use the prior module from section 4.1.1 and one ChIP\_partial dataset allowing maximum 6 Histone ChIP-seq datasets. 
<<priorGenerate_DNase,eval=FALSE>>=
priorGenerate_DNase <- priorGenerate(priorProcess_DNase,
 chipFile="ChIP_partial.fastq", maxHistone=6, outfileLoc="./")
@
%\begin{verbatim}
%priorGenerate_DNase <- priorGenerate(priorProcess_DNase,
% chipFile="ChIP_partial.fastq", maxHistone=6, outfileLoc="./")
%\end{verbatim}

This function updates the \emph{Prior} object created in section 4.1.\\ 
It is important to emphasize that \Rcode{chipFile} can be a vector of fastq files with different replicates but they should all be from the same transcription factor of the same experiment.\\
The main slot that is updated in this step is \textbf{prior}, which is a list of prior files, prior\_chip$i$.txt, for each ChIP-seq datasets. In our case, we only use one ChIP\_partial.fastq file thus only one prior file is created. The first line of the prior file starts with the number of total groups, followed by the prior values for each group. Other lines record the number of positions in each group and the corresponding groups (as in the posLoc\_bychr slot):
\begin{verbatim}
3285 1.00472158441105 1.0048264374093 1.00487973388612 1.00493361889526 ...
\end{verbatim}
In our example, there are 3285 groups, followed by their prior values for each group.
\subsection{Allocating multi-reads}

Using the \emph{Prior} object created in section 4.2, the user can run the \Rcode{readAllocate} function of \Rpackage{permseq} to allocate the multi-reads by the prior built in the previous steps and get the final results.\\
Allocating the multi-reads of ChIP-seq involves the following steps. 
\begin{enumerate}
\item Allocate ChIP-seq multi-reads based the prior probability using CSEM. BAM files are generated for each ChIP data.
\item Convert BAM file into other format specified under the \Rcode{outputFormat} argument. We can select the format to be tagAlign or BED.
\item Select reads from previous file with allocation score higher than \Rcode{chipThres} .
\end{enumerate}
For example, we choose the output format of tagAlign and use the object created in section 4.2:
<<readAllocate_DNase,eval=FALSE>>=
readAllocate_DNase <- readAllocate(priorGenerate_DNase, outfileLoc="./",
 outputFormat="tagAlign", chipThres=500, chipFile=NULL, bowtieIndex=NULL,
 csemDir=NULL, bowtieDir=NULL, vBowtie=NULL, mBowtie=NULL, pBowtie=NULL, fragL=NULL)
@
%\begin{verbatim}
%readAllocate_DNase <- readAllocate(priorGenerate_DNase, outfileLoc="./",
% outputFormat="tagAlign", chipThres=500, chipFile=NULL, bowtieIndex=NULL,
% csemDir=NULL, bowtieDir=NULL, vBowtie=NULL, mBowtie=NULL, pBowtie=NULL, fragL=NULL)
%\end{verbatim}
This function creates a final \emph{Prior} S4 object.\\
If no prior is provided, \emph{readAllocate} will be reduced to CSEM alignment. Users can refer to section 6.1 for allocating multi-reads without prior information (DNase and/or Histone ChIP-seq).
\section{\emph{Prior} Class}
\emph{Prior} is an S4 class containing information for ChIP-seq alignment.\\
It will be created in the first step of \Rpackage{permseq}, section 4.1, and then updated with new information when prior is built, section 4.2, and reads are allocated, section 4.3.
\subsection{names()}
\Rcode{names()} is equivalent to \Rcode{slotNames()}. It will return the names of all the slots in a \emph{Prior} class object.\\
For example:
\begin{verbatim}
> names(readAllocate_Dnase)
 [1] "dnaseName"    "dnaseAlign"   "dnaseKnots"   "dnaseThres"   "posLoc_bychr"
 [6] "dnaseHistone" "histoneName"  "histoneNum"   "histoneAlign" "histoneGrpL" 
[11] "chipName"     "chipNum"      "chipAlign"    "chipSAM"      "chipAllocate"
[16] "chipUni"      "chipFormat"   "dataNum"      "fragL"        "bowtieInfo"  
[21] "csemDir"      "outfileLoc"   "prior"        "chrom.ref"   
\end{verbatim}
For a detailed description of the slots, please refer to the R help manual of the package.
\subsection{print()}

\Rcode{print()} will print all the slots of \emph{Piror} class. The screen output will be divided into four categories:
\begin{itemize}
\item[$\bullet$] DNase-seq Related Information.
\item[$\bullet$] Histone ChIP-seq Related Information.
\item[$\bullet$] ChIP-seq Related Information.
\item[$\bullet$] Other Parameter and Directory Information.
\end{itemize}

\subsection{show()}

\Rcode{show()} will print only selected core information of \emph{Prior} class. The screen output will be divided into four categories:
\begin{itemize}
\item[$\bullet$] DNase-seq Minimal Information: \Rcode{dnaseName}, \Rcode{dnaseThres},  \Rcode{dnaseKnots} and \Rcode{dnaseHistone}.
\item[$\bullet$] Histone ChIP-seq Minimal Information: \Rcode{histoneName} and \Rcode{histoneGrpL}.
\item[$\bullet$] ChIP-seq Minimal Information: \Rcode{chipName} and \Rcode{chipFormat}.
\item[$\bullet$] Other Information: \Rcode{dataNum}, \Rcode{prior} and \Rcode{chrom.ref}.
\end{itemize}
\subsection{summary()}
Given a \emph{Prior} object, \Rcode{summary()} will return the alignment details of DNase-seq, Histone ChIP-seq and/or ChIP-seq files from bowtie.\\
For example, in section 4.3 we only use DNase-seq to build the prior on which we allocate the ChIP-seq reads. The summary for the resulting \emph{Prior} object from readAllocate will be:
\begin{verbatim}
> summary(readAllocate_DNase)
***********************************************************************************
Alignment Summary for DNase-seq Dataset:
***********************************************************************************
                                                             Alignment Information
Number of reads processed:                                                 1436820
Number of reads with at least one reported alignment:                      1436820
Percentage of reads with at least one reported alignment(%):                   100
Number of reads failed to align:                                                 0
Percentage of reads failed to align(%):                                          0
Total number of alignment reported:                                        8970293
***********************************************************************************
Alignment Summary for ChIP-seq Dataset chip_partial:
***********************************************************************************
                                                             Alignment Information
Number of reads processed:                                                  504409
Number of reads with at least one reported alignment:                       504409
Percentage of reads with at least one reported alignment(%):                   100
Number of reads failed to align:                                                 0
Percentage of reads failed to align(%):                                          0
Total number of alignment reported:                                        3287483
\end{verbatim}

We use the demo data that includes only the reads that will align to the partial chr22 which explain why bowtie can achieve 100\% alignment here.

\subsection{plot()}
Given a \emph{Prior} object from \Rcode{priorHistone\_multi}, \Rcode{priorGenerate} or \Rcode{readAllocate}, it will plot DNase read counts versus averaged ChIP read counts using aggregated strategy with three vertical lines indicating the DNase-seq knot points at the 90, 99 and 99.9th percentiles of the DNase-seq read count distribution. The aggragated strategy here means that genomic position with the same DNase-seq read counts are grouped together and ChIP-seq read counts are averaged within each group. The resulting plot is the one in Figure \ref{figure:plot}.

\begin{figure}[h!]
\centering
\includegraphics[width=4in]{plot_OnlyDnase.pdf}
\caption{\texttt{plot(readAllocate\_DNase)}}\label{figure:plot}
\end{figure}

\section{More Options}
\subsection{Allocate multi-reads without using - -prior option in CSEM}
\Rpackage{permseq} also allows the users to allocate multi-reads without using any prior information based on DNase-seq and/or Histone ChIP-seq datasets.\\
In order to do this, run \Rcode{readAllocate} directly and set \Rcode{object=NULL}:
<<result,eval=FALSE>>=
result <- readAllocate(object=NULL, outfileLoc="./", outputFormat=NULL, 
 chipFile="ChIP_partial.fastq", bowtieIndex="./chr22_partial",
 csemDir="./csem-2.3", bowtieDir="./bowtie-1.1.1", vBowtie=2,
 mBowtie=99, pBowtie=8, fragL=200)
@
%\begin{verbatim}
%result <- readAllocate(object=NULL, outfileLoc="./", outputFormat=NULL, 
% chipFile="ChIP_partial.fastq", bowtieIndex="./chr22_partial",
% csemDir="./csem-2.3", bowtieDir="./bowtie-1.1.1", vBowtie=2,
% mBowtie=99, pBowtie=8, fragL=200)
%\end{verbatim}
If no \emph{Prior} object is provided, it is necessary to give the parameter value to \emph{bowtieIndex}, \emph{csemDir}, \emph{bowtieDir}, \emph{vBowtie}, \emph{mBowtie}, \emph{pBowtie}, and \emph{fragL} which  were set as \Rcode{NULL} in section 4.3.\\
We will get BAM file of the allocated read named "ChIP\_partial\_permseq.bam" as the final \emph{permseq} alignment results. Besides, we will also get tagAlign or BED files depending on the option set in \Rcode{outputFormat}.
\subsection{Save intermediate files}

The option \Rcode{saveFiles} in \Rcode{priorProcess} and \Rcode{priorHistone\_init} will allow the users to store intermediate files or not. The default is set as \Rcode{TRUE} which means saving the intermediate files.\\
The \Rpackage{permseq} package generates different folders for each given data (DNase-seq and/or Histone ChIP-seq) which can take a lot of space of your disk. The folders store the processed files from \Rcode{priorProcess} or \Rcode{priorHistone\_init}. They are created in order to generate the file that encodes which segments of the genome are in which group  that will be used to produce the prior file for CSEM.\\
Some of these files are:
\begin{itemize}
\item[$\bullet$] SAM file with aligned reads.
\item[$\bullet$] BAM, SORTED.BAM and SORTED.BAM.BAI from the SAM file.
\item[$\bullet$] BED file with allocated multi-reads.
\item[$\bullet$] BED file with selected reads (scores higher than \Rcode{AllocThres}).
\item[$\bullet$] BED files with selected scores split by chromosomes used (given in \Rcode{chromList}).
\end{itemize}
By setting \Rcode{saveFiles=FALSE}, \Rpackage{permseq} will remove these intermediate files which will not be used in the latter proceduresr leaving only the BED file with allocated multi-reads and the file under the \Rcode{posLoc\_bychr} slot which is necessary in the next step.\\
The \emph{Prior} object generated will be the same as in section 4.1.
\subsection{BAM or BED files directly}

If the users have already processed the DNase and/or Histone ChIP-seq datasets and the  BAM files with aligned reads or the BED files with allocated multi-reads are already available, they can be directly given as an argument to the \Rcode{dnaseFile} and \Rcode{histoneFile} of \Rcode{priorProcess} and \Rcode{priorHistone\_init} instead of the fastq files. Using the aligned BAM or BED files, considerably computational time will be saved.\\
The \emph{Prior} object generated will be the same as in section 4.1.

\subsection{Chromosome list}

In \Rpackage{permseq}, it is important that the users provide the \emph{chrList} argument value consistent with the chromosome(s) name(s) in the corresponding .fa file(s). Default is set as \Rcode{NULL} and \Rpackage{permseq} will extract the chromosome names from processed files. For instance, it will use SAM file if DNase input file is in fastq format or BED file if DNase input file is in BAM or BED format.\\
It is recommendable to give the chromosome list since it will accelerate the process but be sure to make it consistent with the .fa files.\\
The \emph{Prior} object generated will be the same as in section 4.1.



\section{SessionInfo}
<<sessionInfo, results='asis', eval=TRUE>>=
toLatex(sessionInfo())
@



\begin{thebibliography}{9}

  \bibitem{Dongjun} Chung D, Kuan PF, Li B, Sanalkumar R, Liang K, Bresnick E, Dewey C and Kele\c{s} S (2011) {\em Discovering Transcription Factor Binding Sites in Highly Repetitive Regions of Genomes with Multi-Read Analysis of ChIP-Seq Data}. PLoS Computational Biology. 

  \bibitem{Xin} Zeng X, Li B, Welch R, Dewey C and Kele\c{s} S {\em Perm-seq: Mapping protein-DNA interactions in segmental duplication and highly repetitive regions of genomes with prior-enhanced read mapping}. Under Review.


\end{thebibliography}


\end{document}
